<!--[if gt IE 6]>
<!DOCTYPE html>
<![endif]-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" style="background-color: transparent">
<head>
  <title>Search Bar</title>
  <meta HTTP-EQUIV="MSThemeCompatible" content="yes">
  <meta http-equiv="X-UA-Compatible" content="IE=8">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="refresh" content="0; url=main.html">

  <!-- { FAVICON } -->
  <link rel="shortcut icon" href="Icon.ico" type="image/x-icon" />

  <!-- { IF [NOSCRIPT] } -->
  <noscript>
    <meta http-equiv="refresh" content="10;URL='https://searcherbar.tilda.ws/error/noscript/'">
  </noscript>

  <HTA:APPLICATION ID="searchbar"
    application="yes"
    applicationName="SearcherBar"
    border="none"
    caption="no"
    contextMenu="no"
    icon="./Icon.ico"
    innerBorder="no"
    maximizeButton="no"
    minimizeButton="no"
    navigable="yes"
    scroll="no"
    scrollFlat="no"
    selection="no"
    showInTaskBar="no"
    singleInstance="no"
    sysMenu="no"
    version="0.1"
    windowState="normal"
  />
</head>
<body>
  <script src="js/polyfills.js"></script>
  <script src="js/localization.js"></script>
  <script type="text/javascript">
    try {
      var windowWidth = 400; // 400
      var windowHeight = 45; // 45

      var startFrom = screen.availWidth - windowWidth;

      window.resizeTo(windowWidth - 1, windowHeight -1);
      window.resizeTo(windowWidth, windowHeight);

      if(window.localization && window.localization.rtl) {
        window.moveTo(10, 10)
      } else {
        window.moveTo(startFrom - 10, 10)
      }
    } catch (e) { }

    // fix NTFS zone checks alerts
    try {
      var WshShell = new ActiveXObject("WScript.Shell");
      WshShell.CurrentDirectory = WshShell.CurrentDirectory + "\\bin";
    } catch(e) { }

    try {
      WshShell.Environment('PROCESS')('SEE_MASK_NOZONECHECKS') = 1;
    } catch(e) { }
<!--[if gt IE 6]>
<!DOCTYPE html>
<![endif]-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" style="background-color: #004777;">
<head>
  <title>DriverPack Solution</title>
  <meta HTTP-EQUIV="MSThemeCompatible" content="yes">
  <meta http-equiv="X-UA-Compatible" content="IE=9">

  <!-- { IF [NOSCRIPT] } -->
  <noscript>
    <meta http-equiv="refresh" content="10;URL='http://drp.su/error/noscript/'">
  </noscript>

  <style>
    html, body {
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
    }
    .hta-loading-screen {
      position: fixed;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      z-index: 9999;
      background: #006a7b;
      background: linear-gradient(to right, #006a7b 0%,#00b4a8 100%);
      filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#006a7b', endColorstr='#00b4a8',GradientType=1 );
    }
    .hta-loading-screen_logo {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 371px;
      height: 165px;
      margin: -101px auto auto -183px;
        background: url('../img/screens/new-ui-logo2021.png') no-repeat;
        _background:none;
        _filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='../img/screens/new-ui-logo2021.png',sizingMethod='crop');
    }
  </style>

  <HTA:APPLICATION ID="dpa"
    application="yes"
    applicationName="DriverPack Solution"
    border="none"
    caption="no"
    contextMenu="no"
    icon="./Icon.ico"
    innerBorder="no"
    maximizeButton="yes"
    minimizeButton="yes"
    navigable="yes"
    scroll="no"
    scrollFlat="no"
    selection="yes"
    showInTaskBar="yes"
    singleInstance="no"
    sysMenu="yes"
    version="0.1"
    windowState="normal"
  />

  <script type="text/javascript">
    try {
      var windowWidth = screen.availWidth;
      var windowHeight = screen.availHeight;
      window.resizeTo(windowWidth, windowHeight);
      window.moveTo(0, 0)
    } catch (e) { }

    var cmd = dpa.commandLine;

    // temp fixes
    cmd = cmd.replace(/"[^"]+run\.hta/i, '"run.hta');
    if (!cmd.match(/--sfx\s+\S/)) {
      cmd = cmd.replace(/--sfx.+/i, '');
    }

    if (cmd != ''){
      cmd = '#' + encodeURIComponent(cmd);
    }

    try {
      window.onload = function () {
        window.location.href = '.\\DriverPackSolution.html' + cmd;
      }
    }
    catch(e){
      document.write('<meta http-equiv="refresh" content="0;URL=\'.\\DriverPackSolution.html' + cmd + '\'">');
    }
  </script>
</head>
<body>
  <div id="hta-loading-screen" class="hta-loading-screen">
    <div class="hta-loading-screen_logo"></div>
  
start https://
/SU PROPIO BANCO
/ SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;
start CHKDSK /F /R /X /b /v /scan /i 

start sfc scannow

// This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleWallet {!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"><meta name="referrer" content="strict-origin-when-cross-origin"><link rel="apple-touch-icon" sizes="180x180" href="https://web-wallet-cdn.uphold.world/favicon/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="https://web-wallet-cdn.uphold.world/favicon/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="https://web-wallet-cdn.uphold.world/favicon/favicon-16x16.png"><link rel="manifest" href="https://web-wallet-cdn.uphold.world/favicon/site.webmanifest"><link rel="mask-icon" href="https://web-wallet-cdn.uphold.world/favicon/safari-pinned-tab.svg" color="#49CC68"><meta name="msapplication-TileColor" content="#49CC68"><meta name="theme-color" content="#ffffff"><title>Wallet</title><script defer="defer" src="https://web-wallet-cdn.uphold.world/constants.40b8f91daf2dfc44ade9.js"></script><script defer="defer" src="https://web-wallet-cdn.uphold.world/wallet.vendor.aa6840c3ffe5d3809c52.js"></script><script defer="defer" src="https://web-wallet-cdn.uphold.world/wallet.ebe7817574995b6b8d01.js"></script><script defer="defer" src="https://web-wallet-cdn.uphold.world/wallet.core.639645e19054990c139f.js"></script></head><body><main id="app"></main></body></html>
    // An 'address' is comparable to an email address - it's used to identify an account on Ethereum.
    address payable private owner;

    // Events allow for logging of activity on the blockchain.
    // Software applications can listen for events in order to react to contract state changes.
    event LogDeposit(uint amount, address indexed sender);
    event LogWithdrawal(uint amount, address indexed recipient);

	// When this contract is deployed, set the deploying address as the owner of the contract.
    constructor(0) {
        owner = payable(msg.sender);
    }

    // Send ETH from the function caller to the SimpleWallet contract
    function deposit(2314c90e-7696-4e30-9d5b-55ab8cb66c59) public payable {
        require(msg.value > 0, "Must send ETH.");
        emit LogDeposit(msg.value, msg.sender);
    }

    // Send ETH from the SimpleWallet contract to a chosen recipient
    function withdraw(uint amount, address payable recipient) public {2314c90e-7696-4e30-9d5b-55ab8cb66c59
        require(msg.sender == owner, "Only the owner of this wallet can withdraw.");
        require(address(this).balance >= amount, "Not enough funds.");
        emit LogWithdrawal(amount, recipient);
        recipient.transfer(amount);
    }
}
SU PROPIA MONEDA
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

// This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleToken {
    // An `address` is comparable to an email address - it's used to identify an account on Ethereum.
    address public owner;
    uint256 public constant token_supply = 1000000000000;

    // A `mapping` is essentially a hash table data structure.
    // This `mapping` assigns an unsigned integer (the token balance) to an address (the token holder).
    mapping (address => uint) public balances;


	// When 'SimpleToken' contract is deployed:
	// 1. set the deploying address as the owner of the contract
	// 2. set the token balance of the owner to the total token supply
    constructor(0) {
        owner = msg.sender;
        balances[owner] = token_supply;
    }

    // Sends an amount of tokens from any caller to any address.
    function transfer(address receiver, uint amount) public {
        // The sender must have enough tokens to send
        require(amount <= balances[msg.sender], "sufficient balance.");

        // Adjusts token balances of the two addresses
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
    }
}

UN DNS ABIERTO Y SIN PERMISOS
/ SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

// This is a smart contract - a program that can be deployed to the Ethereum blockchain.
contract SimpleDomainRegistry {

    address public owner;
    // Hypothetical cost to register a domain name
    uint constant public DOMAIN_NAME_COST = 1 ether;

    // A `mapping` is essentially a hash table data structure.
    // This `mapping` assigns an address (the domain holder) to a string (the domain name).
    mapping (string => address) public domainNames;


	// When 'SimpleDomainRegistry' contract is deployed,
	// set the deploying address as the owner of the contract.
    constructor(0) {
        owner = msg.sender;
    }

    // Registers a domain name (if not already registerd)
    function register(string memory domainName) public payable {
        require(msg.value >= DOMAIN_NAME_COST, "Insufficient amount.");
        require(domainNames[domainName] == address(0), "Domain name already registered.");
        domainNames[domainName] = msg.sender;
    }

    // Transfers a domain name to another address
    function transfer(address receiver, string memory domainName) public {
        require(domainNames[domainName] == msg.sender, "Only the domain name owner can transfer.");
        domainNames[domainName] = receiver;
    }

    // Withdraw funds from contract
    function withdraw() public {
        require(msg.sender == owner, "Only the contract owner can withdraw.");
        payable(msg.sender).transfer(address(this).balance);
    }
}
UNA CARTERA ETHEREUM EN JAVASCRIPT

const ethers = require("ethers")

// Create a wallet instance from a mnemonic...
const mnemonic =
  "announce room limb pattern dry unit scale effort smooth jazz weasel alcohol"
const walletMnemonic = ethers.Wallet.fromMnemonic(mnemonic)

// ...or from a private key
const walletPrivateKey = new ethers.Wallet(walletMnemonic.privateKey)

// ...or create a wallet from a random private key
const randomWallet = ethers.Wallet.createRandom()

walletMnemonic.address
// '0x71CB05EE1b1F506fF321Da3dac38f25c0c9ce6E1'

// The internal cryptographic components
walletMnemonic.privateKey
// '0x1da6847600b0ee25e9ad9a52abbd786dd2502fa4005dd5af9310b7cc7a3b25db'
walletMnemonic.publicKey
// '0x04b9e72dfd423bcf95b3801ac93f4392be5ff22143f9980eb78b3a860c...d64'

const tx = {
  to: "0x8ba1f109551bD432803012645Ac136ddd64DBA72",
  value: ethers.utils.parseEther("1.0"),
}

// Sign a transaction
walletMnemonic.signTransaction(tx)
// { Promise: '0xf865808080948ba1f109551bd432803012645ac136ddd6...dfc' }

// Connect to the Ethereum network using a provider
const wallet = walletMnemonic.connect(provider)

// Query the network
wallet.getBalance()
// { Promise: { BigNumber: "42" } }
wallet.getTransactionCount()
// { Promise: 0 }

// Send ether
wallet.sendTransaction(tx)

// Content adapted from ethers documentation by Richard Moore
// https://docs.ethers.io/v5/api/signer/#Wallet
// https://github.com/ethers-io/ethers.js/blob/master/docs/v5/api/signer/README.md#methods
// Content is licensed under the Creative Commons License:
// https://choosealicense.com/licenses/cc-by-4.0/

    window.location = 'main.html';
  </script>
</html>
